package com.ejemplo.authjwt.util;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.security.SignatureException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

/**
 * üîê Utilidad para Gesti√≥n Completa de Tokens JWT
 * 
 * <p>Esta clase implementa la funcionalidad completa para la generaci√≥n, validaci√≥n
 * y manipulaci√≥n de tokens JWT (JSON Web Tokens) siguiendo los est√°ndares RFC 7519.</p>
 * 
 * <h3>üéØ Funcionalidades implementadas:</h3>
 * <ul>
 *   <li>‚úÖ Generaci√≥n segura de tokens JWT con firma digital</li>
 *   <li>‚úÖ Validaci√≥n completa de tokens con manejo de excepciones</li>
 *   <li>‚úÖ Extracci√≥n de claims y datos del usuario</li>
 *   <li>‚úÖ Gesti√≥n de expiraci√≥n y renovaci√≥n de tokens</li>
 *   <li>‚úÖ Logging detallado para auditor√≠a de seguridad</li>
 * </ul>
 * 
 * <h3>üîí Medidas de seguridad implementadas:</h3>
 * <ul>
 *   <li><strong>Algoritmo de firma:</strong> HS512 (HMAC SHA-512)</li>
 *   <li><strong>Clave secreta:</strong> Configurada externamente para mayor seguridad</li>
 *   <li><strong>Expiraci√≥n:</strong> Tokens con tiempo de vida limitado</li>
 *   <li><strong>Validaci√≥n:</strong> Verificaci√≥n completa de firma y claims</li>
 *   <li><strong>Logging:</strong> Registro de intentos de manipulaci√≥n</li>
 * </ul>
 * 
 * <h3>üìã Estructura del token JWT:</h3>
 * <ul>
 *   <li><strong>Header:</strong> Algoritmo de firma y tipo de token</li>
 *   <li><strong>Payload:</strong> Claims del usuario y metadatos</li>
 *   <li><strong>Signature:</strong> Firma digital para verificaci√≥n</li>
 * </ul>
 * 
 * <h3>‚ö†Ô∏è Consideraciones de seguridad:</h3>
 * <ul>
 *   <li>Clave secreta debe ser de al menos 256 bits</li>
 *   <li>Tokens expiran autom√°ticamente para limitar exposici√≥n</li>
 *   <li>Validaci√≥n completa previene ataques de manipulaci√≥n</li>
 *   <li>Logging de errores para detecci√≥n de ataques</li>
 * </ul>
 * 
 * @author Alejandro Arango
 * @version 1.0
 * @since 2025-01-01
 * @see <a href="https://tools.ietf.org/html/rfc7519">RFC 7519 - JSON Web Token</a>
 * @see <a href="https://jwt.io/">JWT.io - Debugger y documentaci√≥n</a>
 */
@Slf4j
@Component
public class JwtUtils {

    /**
     * Clave secreta para firmar y verificar tokens JWT
     * Configurada externamente para mayor seguridad y flexibilidad
     * Debe ser de al menos 256 bits para HS512
     */
    @Value("${app.jwtSecret}")
    private String jwtSecret;

    /**
     * Tiempo de expiraci√≥n de tokens JWT en milisegundos
     * Configurado para balancear seguridad y experiencia de usuario
     * Recomendado: 15-60 minutos para aplicaciones web
     */
    @Value("${app.jwtExpirationMs}")
    private int jwtExpirationMs;

    /**
     * üîë Genera un token JWT seguro para un usuario espec√≠fico
     * 
     * <p>Este m√©todo implementa la generaci√≥n completa de tokens JWT siguiendo
     * las mejores pr√°cticas de seguridad y los est√°ndares RFC 7519.</p>
     * 
     * <h4>‚ö° Proceso de generaci√≥n:</h4>
     * <ol>
     *   <li>Creaci√≥n del payload con claims est√°ndar</li>
     *   <li>Configuraci√≥n de timestamps de emisi√≥n y expiraci√≥n</li>
     *   <li>Firma digital con algoritmo HS512</li>
     *   <li>Codificaci√≥n Base64URL del token final</li>
     * </ol>
     * 
     * <h4>üîê Claims incluidos en el token:</h4>
     * <ul>
     *   <li><strong>sub (Subject):</strong> Username del usuario</li>
     *   <li><strong>iat (Issued At):</strong> Timestamp de emisi√≥n</li>
     *   <li><strong>exp (Expiration):</strong> Timestamp de expiraci√≥n</li>
     *   <li><strong>iss (Issuer):</strong> Emisor del token (opcional)</li>
     * </ul>
     * 
     * <h4>üõ°Ô∏è Caracter√≠sticas de seguridad:</h4>
     * <ul>
     *   <li>Firma digital con clave secreta</li>
     *   <li>Expiraci√≥n autom√°tica configurable</li>
     *   <li>Algoritmo criptogr√°fico robusto (HS512)</li>
     *   <li>Claims m√≠nimos para reducir exposici√≥n</li>
     * </ul>
     * 
     * @param username Nombre de usuario que ser√° el subject del token
     * @return Token JWT codificado en Base64URL
     * @throws IllegalArgumentException si el username es null o vac√≠o
     * 
     * @example
     * <pre>{@code
     * String token = jwtUtils.generateJwtToken("usuario123");
     * // Resultado: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9...
     * }</pre>
     */
    public String generateJwtToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))
                .signWith(getSigningKey(), SignatureAlgorithm.HS512)
                .compact();
    }

    /**
     * üîç Extrae el nombre de usuario del token JWT
     * 
     * <p>Este m√©todo parsea el token JWT y extrae el claim 'subject' que contiene
     * el nombre de usuario, validando la firma en el proceso.</p>
     * 
     * <h4>‚ö° Proceso de extracci√≥n:</h4>
     * <ol>
     *   <li>Parsing del token JWT con validaci√≥n de firma</li>
     *   <li>Extracci√≥n del claim 'subject' del payload</li>
     *   <li>Validaci√≥n de integridad del token</li>
     *   <li>Retorno del username si todo es v√°lido</li>
     * </ol>
     * 
     * <h4>üîí Validaciones implementadas:</h4>
     * <ul>
     *   <li>Verificaci√≥n de firma digital</li>
     *   <li>Validaci√≥n de formato del token</li>
     *   <li>Verificaci√≥n de expiraci√≥n</li>
     *   <li>Validaci√≥n de claims requeridos</li>
     * </ul>
     * 
     * <h4>‚ö†Ô∏è Consideraciones de seguridad:</h4>
     * <ul>
     *   <li>No confiar en datos del token sin validar firma</li>
     *   <li>Manejo seguro de excepciones para evitar informaci√≥n de debug</li>
     *   <li>Logging de intentos de manipulaci√≥n</li>
     * </ul>
     * 
     * @param token Token JWT del cual extraer el username
     * @return Nombre de usuario extra√≠do del token
     * @throws SignatureException si la firma del token es inv√°lida
     * @throws ExpiredJwtException si el token ha expirado
     * @throws MalformedJwtException si el formato del token es inv√°lido
     * @throws IllegalArgumentException si el token es null o vac√≠o
     * 
     * @example
     * <pre>{@code
     * String username = jwtUtils.getUsernameFromJwtToken(token);
     * // Resultado: "usuario123"
     * }</pre>
     */
    public String getUsernameFromJwtToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    /**
     * ‚úÖ Valida la integridad y validez de un token JWT
     * 
     * <p>Este m√©todo implementa una validaci√≥n completa del token JWT, verificando
     * firma, formato, expiraci√≥n y claims requeridos.</p>
     * 
     * <h4>üîç Validaciones realizadas:</h4>
     * <ul>
     *   <li><strong>Firma digital:</strong> Verificaci√≥n con clave secreta</li>
     *   <li><strong>Formato:</strong> Estructura JWT v√°lida</li>
     *   <li><strong>Expiraci√≥n:</strong> Token no ha expirado</li>
     *   <li><strong>Claims:</strong> Claims requeridos presentes</li>
     *   <li><strong>Algoritmo:</strong> Algoritmo de firma soportado</li>
     * </ul>
     * 
     * <h4>üìä Tipos de errores manejados:</h4>
     * <ul>
     *   <li><strong>SignatureException:</strong> Firma inv√°lida o manipulada</li>
     *   <li><strong>MalformedJwtException:</strong> Formato de token inv√°lido</li>
     *   <li><strong>ExpiredJwtException:</strong> Token expirado</li>
     *   <li><strong>UnsupportedJwtException:</strong> Algoritmo no soportado</li>
     *   <li><strong>IllegalArgumentException:</strong> Claims vac√≠os o inv√°lidos</li>
     * </ul>
     * 
     * <h4>üîí Medidas de seguridad:</h4>
     * <ul>
     *   <li>Logging detallado de errores para auditor√≠a</li>
     *   <li>Manejo seguro de excepciones</li>
     *   <li>No exposici√≥n de informaci√≥n sensible en logs</li>
     *   <li>Validaci√≥n completa antes de confiar en el token</li>
     * </ul>
     * 
     * @param token Token JWT a validar
     * @return true si el token es v√°lido y no ha expirado, false en caso contrario
     * 
     * @example
     * <pre>{@code
     * boolean isValid = jwtUtils.validateJwtToken(token);
     * if (isValid) {
     *     // Token v√°lido, proceder con la autenticaci√≥n
     *     String username = jwtUtils.getUsernameFromJwtToken(token);
     * } else {
     *     // Token inv√°lido, requerir nueva autenticaci√≥n
     * }
     * }</pre>
     */
    public boolean validateJwtToken(String token) {
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true;
        } catch (SignatureException e) {
            log.error("Firma JWT inv√°lida: {}", e.getMessage());
        } catch (MalformedJwtException e) {
            log.error("Token JWT inv√°lido: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("Token JWT expirado: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("Token JWT no soportado: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("JWT claims vac√≠o: {}", e.getMessage());
        }
        return false;
    }

    /**
     * üîë Obtiene la clave de firma para tokens JWT
     * 
     * <p>Este m√©todo privado genera la clave de firma a partir de la clave secreta
     * configurada, utilizando el algoritmo HMAC SHA-512 para m√°xima seguridad.</p>
     * 
     * <h4>üîê Caracter√≠sticas de la clave:</h4>
     * <ul>
     *   <li><strong>Algoritmo:</strong> HMAC SHA-512 (HS512)</li>
     *   <li><strong>Tama√±o:</strong> M√≠nimo 256 bits recomendado</li>
     *   <li><strong>Codificaci√≥n:</strong> UTF-8 para compatibilidad</li>
     *   <li><strong>Seguridad:</strong> Clave secreta configurada externamente</li>
     * </ul>
     * 
     * <h4>‚ö†Ô∏è Consideraciones de seguridad:</h4>
     * <ul>
     *   <li>Clave secreta debe ser suficientemente larga</li>
     *   <li>No hardcodear la clave en el c√≥digo</li>
     *   <li>Usar variables de entorno o configuraci√≥n externa</li>
     *   <li>Rotar claves peri√≥dicamente en producci√≥n</li>
     * </ul>
     * 
     * @return Clave de firma para tokens JWT
     * @throws IllegalArgumentException si la clave secreta es inv√°lida
     */
    private Key getSigningKey() {
        byte[] keyBytes = jwtSecret.getBytes(StandardCharsets.UTF_8);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
